package edu.pnu.config.filter;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.log;

import java.io.IOException;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.fasterxml.jackson.databind.ObjectMapper;

import edu.pnu.domain.Member;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

//UsernamePasswordAuthenticationFilter로 부터 상속받은 JWTAuthenticationFilter 생성
//로그인 인증을 위한 ㅣ큐리티 필터 작성
public class JWTAuthenticationFilter extends UsernamePasswordAuthenticationFilter {

	private final AuthenticationManager authenticationManager; // 생성자에서 파라미터로 전달 받는다.

	@Override
//로그인 인증 시도를 위한 메소드 오버라이딩
	public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)
			throws AuthenticationException {
		// 여기에서 인증을 위한 토큰을 생성해서 인증을 요청하고 성공하면 세션에 인증정보를 등록한다.
		// req의 Body에 JSON으로 담겨오는 username/password를 읽어서 Member객체로 받아온다
		ObjectMapper om = new ObjectMapper();
		try {
			// req.getInputStream()에서 직접 읽어서 객체를 만들어도 된다. 자신감을 가지고 해보자.
			Member member = om.readValue(request.getInputStream(), Member.class);

			// 읽어 들인 정보가 정확한지 콘솔에 출력해본다.
			log.info("attemptAuthentication : [" + member + "]");

		} catch (Exception e) {
			e.printStackTrace();
		}

		return null;
	}

	@Override
//성공적으로 로그인 인증이 완료된 후 처리를 위한 메소드 오버라이딩
	protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response, FilterChain chain,
			Authentication authResult) throws IOException, ServletException {
		// JWT 토큰을 만들어서 resp의 Header에 등록한다.
		chain.doFilter(request, response);
	}
}
